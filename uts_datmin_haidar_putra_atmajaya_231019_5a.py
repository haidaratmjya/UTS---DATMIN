# -*- coding: utf-8 -*-
"""UTS_DATMIN_HAIDAR PUTRA ATMAJAYA_231019_5A

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eoNtrksM59hh7b0QhIm7sjil3I6VV-0t
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
import missingno as msno

url = 'https://raw.githubusercontent.com/FarrelllAdityaaa/dataset-uts-datamining/refs/heads/main/used_cars_price_fiks.csv'
df = pd.read_csv(url)
df.info()
df.head()

# Menampilkan ringkasan statistik dari data numerik dan menghitung jumlah nilai yang hilang perkolom
print('\nDescribe (numerical)')
print(df.describe())
print('\nMissing values per column')
print(df.isna().sum())

print('Columns:', df.columns.tolist())
candidates = [c for c in df.columns if 'price' in c.lower() or 'harga' in c.lower()]
print('Candidate target columns:', candidates)

if len(candidates) > 0:
  target_col = candidates[0]
else:
  target_col = df.columns[-1]

print('Using target column:', target_col)
plt.figure(figsize=(8,4))
sns.histplot(df[target_col].dropna(), kde=True)
plt.title(f'Distribution of {target_col}')
plt.show()

num_cols = df.select_dtypes(include=[np.number]).columns.tolist()
print('Numeric columns:', num_cols)

if len(num_cols) > 1:
  plt.figure(figsize=(10,8))
  sns.heatmap(df[num_cols].corr(), annot=True, fmt='.2f', cmap='coolwarm')
  plt.title('Correlation matrix (numeric)')
  plt.show()

# Proses pembersihan - duplikasi, pembersihan yang agresif.
dupes = df.duplicated().sum()
print("Duplicates:", dupes)
if dupes > 0:
  df = df.drop_duplicates().reset_index(drop=True)
  print("Dropped duplicates, new shape:", df.shape)

missing_counts = df.isna().sum()
print("\nMissing counts:\n", missing_counts[missing_counts>0])

threshold = 0.4
cols_to_drop = [c for c in df.columns if df[c].isna().mean() > threshold]
print("Columns with >40% missing (akan dihapus):", cols_to_drop)
if cols_to_drop:
  df = df.drop(columns=cols_to_drop)

num_cols = df.select_dtypes(include=[np.number]).columns.tolist()
for c in num_cols:
  if df[c].isna().sum() > 0:
    med = df[c].median()
    df[c] = df[c].fillna(med)
    print(f"Imputed numeric {c} dengan median={med}")

cat_cols = df.select_dtypes(include=["object", "category"]).columns.tolist()
for c in cat_cols:
  if df[c].isna().sum() > 0:
    mode = df[c].mode()[0]
    df[c] = df[c].fillna(mode)
    print(f"Imputed categorical {c} dengan mode=“{mode}”")

# Data transformation
for c in df.columns:
  if df[c].dtype == object:
    sample_vals = df[c].dropna().astype(str).head(20).tolist()
    if any("," in s or s.replace(".", "", 1).isdigit() for s in sample_vals):
      try:
        cleaned = df[c].astype(str).str.replace(",", "").str.extract(r"([0-9.]+)")[0]
        if cleaned.dropna().shape[0] / df.shape[0] > 0.5:
          df[c] = pd.to_numeric(cleaned, errors="coerce")
          print(f"Kolom {c} dikonversi menjadi numerik")
      except Exception:
        pass


if "year" in df.columns:
  df["age"] = 2025 - pd.to_numeric(df["year"], errors="coerce")
  print("Kolom age dibuat dari year")


for drop_cand in ["id","name","seller_name","owner"]:
  if drop_cand in df.columns:
    df = df.drop(columns=[drop_cand])
    print("Kolom dihapus:", drop_cand)

# Imputasi dan encoding
cat_cols = df.select_dtypes(include=["object", "category"]).columns.tolist()
print("Kolom kategorikal:", cat_cols)


card_threshold = 10
ohe_cols = [c for c in cat_cols if df[c].nunique() <= card_threshold]
high_card_cols = [c for c in cat_cols if df[c].nunique() > card_threshold]
print("One-hot encoding untuk:", ohe_cols)
print("Kolom high-cardinality:", high_card_cols)


df = pd.get_dummies(df, columns=ohe_cols, drop_first=True)


for c in high_card_cols:
  try:
    df[c] = df[c].astype("category").cat.codes
  except Exception:
    df = df.drop(columns=[c])
    print("Kolom high-card dihapus:", c)

# Verifikasi dan analisis korelasi
print("Shape setelah preprocessing:", df.shape)
print("Missing values tersisa?:")
print(df.isna().sum().sum())

if target_col in df.columns:
  corrs = df.corr()[target_col].sort_values(ascending=False)
  print("\nTop korelasi dengan target:")
  print(corrs.head(10))

#Pemodelan dan Evaluasi
df = df.dropna(subset=[target_col]).reset_index(drop=True)

X = df.drop(columns=[target_col])
y = df[target_col]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("Train shape:", X_train.shape, "Test shape:", X_test.shape)

scaler = StandardScaler()
numeric_cols = X_train.select_dtypes(include=[np.number]).columns.tolist()

X_train_num = pd.DataFrame(scaler.fit_transform(X_train[numeric_cols]), columns=numeric_cols, index=X_train.index)
X_test_num = pd.DataFrame(scaler.transform(X_test[numeric_cols]), columns=numeric_cols, index=X_test.index)

X_train_scaled = X_train.copy()
X_test_scaled = X_test.copy()
X_train_scaled[numeric_cols] = X_train_num
X_test_scaled[numeric_cols] = X_test_num

lr = LinearRegression()
lr.fit(X_train_scaled, y_train)

coefs = pd.Series(lr.coef_, index=X_train_scaled.columns).sort_values(key=abs, ascending=False)
print("\nKoefisien terbesar:")
print(coefs.head(10))

y_pred = lr.predict(X_test_scaled)

r2 = r2_score(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f"R2: {r2:.4f}\nMAE: {mae:.4f}\nMSE: {mse:.4f}\nRMSE: {rmse:.4f}")

# Visualisasi
plt.figure(figsize=(7,6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual "+target_col)
plt.ylabel("Predicted "+target_col)
plt.title("Actual vs Predicted")
lims = [min(min(y_test), min(y_pred)), max(max(y_test), max(y_pred))]
plt.plot(lims, lims, "--", linewidth=1)
plt.show()

residuals = y_test - y_pred
plt.figure(figsize=(8,4))
sns.histplot(residuals, kde=True)
plt.title("Distribusi residuals")
plt.show()

plt.figure(figsize=(7,5))
sns.scatterplot(x=y_pred, y=residuals)
plt.axhline(0, color="r", linestyle="--")
plt.xlabel("Predicted")
plt.ylabel("Residuals")
plt.title("Residuals vs Predicted")
plt.show()